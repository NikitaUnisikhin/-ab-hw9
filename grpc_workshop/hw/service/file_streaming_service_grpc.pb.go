// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.14.0
// source: file_streaming_service.proto

package file_transfer

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	FileTransferService_GetFileData_FullMethodName     = "/file_transfer.FileTransferService/GetFileData"
	FileTransferService_GetAllFileNames_FullMethodName = "/file_transfer.FileTransferService/GetAllFileNames"
	FileTransferService_GetFileMetaData_FullMethodName = "/file_transfer.FileTransferService/GetFileMetaData"
)

// FileTransferServiceClient is the client API for FileTransferService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileTransferServiceClient interface {
	GetFileData(ctx context.Context, in *FileName, opts ...grpc.CallOption) (FileTransferService_GetFileDataClient, error)
	GetAllFileNames(ctx context.Context, in *Empty, opts ...grpc.CallOption) (FileTransferService_GetAllFileNamesClient, error)
	GetFileMetaData(ctx context.Context, in *FileName, opts ...grpc.CallOption) (FileTransferService_GetFileMetaDataClient, error)
}

type fileTransferServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFileTransferServiceClient(cc grpc.ClientConnInterface) FileTransferServiceClient {
	return &fileTransferServiceClient{cc}
}

func (c *fileTransferServiceClient) GetFileData(ctx context.Context, in *FileName, opts ...grpc.CallOption) (FileTransferService_GetFileDataClient, error) {
	stream, err := c.cc.NewStream(ctx, &FileTransferService_ServiceDesc.Streams[0], FileTransferService_GetFileData_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &fileTransferServiceGetFileDataClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FileTransferService_GetFileDataClient interface {
	Recv() (*FileData, error)
	grpc.ClientStream
}

type fileTransferServiceGetFileDataClient struct {
	grpc.ClientStream
}

func (x *fileTransferServiceGetFileDataClient) Recv() (*FileData, error) {
	m := new(FileData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fileTransferServiceClient) GetAllFileNames(ctx context.Context, in *Empty, opts ...grpc.CallOption) (FileTransferService_GetAllFileNamesClient, error) {
	stream, err := c.cc.NewStream(ctx, &FileTransferService_ServiceDesc.Streams[1], FileTransferService_GetAllFileNames_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &fileTransferServiceGetAllFileNamesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FileTransferService_GetAllFileNamesClient interface {
	Recv() (*FileName, error)
	grpc.ClientStream
}

type fileTransferServiceGetAllFileNamesClient struct {
	grpc.ClientStream
}

func (x *fileTransferServiceGetAllFileNamesClient) Recv() (*FileName, error) {
	m := new(FileName)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fileTransferServiceClient) GetFileMetaData(ctx context.Context, in *FileName, opts ...grpc.CallOption) (FileTransferService_GetFileMetaDataClient, error) {
	stream, err := c.cc.NewStream(ctx, &FileTransferService_ServiceDesc.Streams[2], FileTransferService_GetFileMetaData_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &fileTransferServiceGetFileMetaDataClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FileTransferService_GetFileMetaDataClient interface {
	Recv() (*FileMetaData, error)
	grpc.ClientStream
}

type fileTransferServiceGetFileMetaDataClient struct {
	grpc.ClientStream
}

func (x *fileTransferServiceGetFileMetaDataClient) Recv() (*FileMetaData, error) {
	m := new(FileMetaData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FileTransferServiceServer is the server API for FileTransferService service.
// All implementations must embed UnimplementedFileTransferServiceServer
// for forward compatibility
type FileTransferServiceServer interface {
	GetFileData(*FileName, FileTransferService_GetFileDataServer) error
	GetAllFileNames(*Empty, FileTransferService_GetAllFileNamesServer) error
	GetFileMetaData(*FileName, FileTransferService_GetFileMetaDataServer) error
	mustEmbedUnimplementedFileTransferServiceServer()
}

// UnimplementedFileTransferServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFileTransferServiceServer struct {
}

func (UnimplementedFileTransferServiceServer) GetFileData(*FileName, FileTransferService_GetFileDataServer) error {
	return status.Errorf(codes.Unimplemented, "method GetFileData not implemented")
}
func (UnimplementedFileTransferServiceServer) GetAllFileNames(*Empty, FileTransferService_GetAllFileNamesServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAllFileNames not implemented")
}
func (UnimplementedFileTransferServiceServer) GetFileMetaData(*FileName, FileTransferService_GetFileMetaDataServer) error {
	return status.Errorf(codes.Unimplemented, "method GetFileMetaData not implemented")
}
func (UnimplementedFileTransferServiceServer) mustEmbedUnimplementedFileTransferServiceServer() {}

// UnsafeFileTransferServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileTransferServiceServer will
// result in compilation errors.
type UnsafeFileTransferServiceServer interface {
	mustEmbedUnimplementedFileTransferServiceServer()
}

func RegisterFileTransferServiceServer(s grpc.ServiceRegistrar, srv FileTransferServiceServer) {
	s.RegisterService(&FileTransferService_ServiceDesc, srv)
}

func _FileTransferService_GetFileData_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FileName)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FileTransferServiceServer).GetFileData(m, &fileTransferServiceGetFileDataServer{stream})
}

type FileTransferService_GetFileDataServer interface {
	Send(*FileData) error
	grpc.ServerStream
}

type fileTransferServiceGetFileDataServer struct {
	grpc.ServerStream
}

func (x *fileTransferServiceGetFileDataServer) Send(m *FileData) error {
	return x.ServerStream.SendMsg(m)
}

func _FileTransferService_GetAllFileNames_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FileTransferServiceServer).GetAllFileNames(m, &fileTransferServiceGetAllFileNamesServer{stream})
}

type FileTransferService_GetAllFileNamesServer interface {
	Send(*FileName) error
	grpc.ServerStream
}

type fileTransferServiceGetAllFileNamesServer struct {
	grpc.ServerStream
}

func (x *fileTransferServiceGetAllFileNamesServer) Send(m *FileName) error {
	return x.ServerStream.SendMsg(m)
}

func _FileTransferService_GetFileMetaData_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FileName)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FileTransferServiceServer).GetFileMetaData(m, &fileTransferServiceGetFileMetaDataServer{stream})
}

type FileTransferService_GetFileMetaDataServer interface {
	Send(*FileMetaData) error
	grpc.ServerStream
}

type fileTransferServiceGetFileMetaDataServer struct {
	grpc.ServerStream
}

func (x *fileTransferServiceGetFileMetaDataServer) Send(m *FileMetaData) error {
	return x.ServerStream.SendMsg(m)
}

// FileTransferService_ServiceDesc is the grpc.ServiceDesc for FileTransferService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileTransferService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "file_transfer.FileTransferService",
	HandlerType: (*FileTransferServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetFileData",
			Handler:       _FileTransferService_GetFileData_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetAllFileNames",
			Handler:       _FileTransferService_GetAllFileNames_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetFileMetaData",
			Handler:       _FileTransferService_GetFileMetaData_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "file_streaming_service.proto",
}
